// @generated by protoc-gen-es v2.7.0 with parameter "target=ts"
// @generated from file chat/v1/chat.proto (package chat.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "@buf/googleapis_googleapis.bufbuild_es/google/api/annotations_pb";
import type { Message as Message$1 } from "@bufbuild/protobuf";

/**
 * Describes the file chat/v1/chat.proto.
 */
export const file_chat_v1_chat: GenFile = /*@__PURE__*/
  fileDesc("ChJjaGF0L3YxL2NoYXQucHJvdG8SB2NoYXQudjEiUAoTTWVzc2FnZVR5cGVUb29sQ2FsbBIMCgRuYW1lGAEgASgJEgwKBGFyZ3MYAiABKAkSDgoGcmVzdWx0GAMgASgJEg0KBWVycm9yGAQgASgJIkEKI01lc3NhZ2VUeXBlVG9vbENhbGxQcmVwYXJlQXJndW1lbnRzEgwKBG5hbWUYASABKAkSDAoEYXJncxgCIAEoCSIkChFNZXNzYWdlVHlwZVN5c3RlbRIPCgdjb250ZW50GAEgASgJIicKFE1lc3NhZ2VUeXBlQXNzaXN0YW50Eg8KB2NvbnRlbnQYASABKAkiUAoPTWVzc2FnZVR5cGVVc2VyEg8KB2NvbnRlbnQYASABKAkSGgoNc2VsZWN0ZWRfdGV4dBgCIAEoCUgAiAEBQhAKDl9zZWxlY3RlZF90ZXh0IikKEk1lc3NhZ2VUeXBlVW5rbm93bhITCgtkZXNjcmlwdGlvbhgBIAEoCSLkAgoOTWVzc2FnZVBheWxvYWQSLAoGc3lzdGVtGAEgASgLMhouY2hhdC52MS5NZXNzYWdlVHlwZVN5c3RlbUgAEigKBHVzZXIYAiABKAsyGC5jaGF0LnYxLk1lc3NhZ2VUeXBlVXNlckgAEjIKCWFzc2lzdGFudBgDIAEoCzIdLmNoYXQudjEuTWVzc2FnZVR5cGVBc3Npc3RhbnRIABJTCht0b29sX2NhbGxfcHJlcGFyZV9hcmd1bWVudHMYBCABKAsyLC5jaGF0LnYxLk1lc3NhZ2VUeXBlVG9vbENhbGxQcmVwYXJlQXJndW1lbnRzSAASMQoJdG9vbF9jYWxsGAUgASgLMhwuY2hhdC52MS5NZXNzYWdlVHlwZVRvb2xDYWxsSAASLgoHdW5rbm93bhgGIAEoCzIbLmNoYXQudjEuTWVzc2FnZVR5cGVVbmtub3duSABCDgoMbWVzc2FnZV90eXBlIkcKB01lc3NhZ2USEgoKbWVzc2FnZV9pZBgBIAEoCRIoCgdwYXlsb2FkGAMgASgLMhcuY2hhdC52MS5NZXNzYWdlUGF5bG9hZCJ9CgxDb252ZXJzYXRpb24SCgoCaWQYASABKAkSDQoFdGl0bGUYAyABKAkSLgoObGFuZ3VhZ2VfbW9kZWwYAiABKA4yFi5jaGF0LnYxLkxhbmd1YWdlTW9kZWwSIgoIbWVzc2FnZXMYBCADKAsyEC5jaGF0LnYxLk1lc3NhZ2UiQgoYTGlzdENvbnZlcnNhdGlvbnNSZXF1ZXN0EhcKCnByb2plY3RfaWQYASABKAlIAIgBAUINCgtfcHJvamVjdF9pZCJJChlMaXN0Q29udmVyc2F0aW9uc1Jlc3BvbnNlEiwKDWNvbnZlcnNhdGlvbnMYASADKAsyFS5jaGF0LnYxLkNvbnZlcnNhdGlvbiIxChZHZXRDb252ZXJzYXRpb25SZXF1ZXN0EhcKD2NvbnZlcnNhdGlvbl9pZBgBIAEoCSJGChdHZXRDb252ZXJzYXRpb25SZXNwb25zZRIrCgxjb252ZXJzYXRpb24YASABKAsyFS5jaGF0LnYxLkNvbnZlcnNhdGlvbiK3AgogQ3JlYXRlQ29udmVyc2F0aW9uTWVzc2FnZVJlcXVlc3QSEgoKcHJvamVjdF9pZBgBIAEoCRIcCg9jb252ZXJzYXRpb25faWQYAiABKAlIAIgBARIuCg5sYW5ndWFnZV9tb2RlbBgDIAEoDjIWLmNoYXQudjEuTGFuZ3VhZ2VNb2RlbBIUCgx1c2VyX21lc3NhZ2UYBCABKAkSHwoSdXNlcl9zZWxlY3RlZF90ZXh0GAUgASgJSAGIAQESOQoRY29udmVyc2F0aW9uX3R5cGUYBiABKA4yGS5jaGF0LnYxLkNvbnZlcnNhdGlvblR5cGVIAogBAUISChBfY29udmVyc2F0aW9uX2lkQhUKE191c2VyX3NlbGVjdGVkX3RleHRCFAoSX2NvbnZlcnNhdGlvbl90eXBlIlAKIUNyZWF0ZUNvbnZlcnNhdGlvbk1lc3NhZ2VSZXNwb25zZRIrCgxjb252ZXJzYXRpb24YASABKAsyFS5jaGF0LnYxLkNvbnZlcnNhdGlvbiJDChlVcGRhdGVDb252ZXJzYXRpb25SZXF1ZXN0EhcKD2NvbnZlcnNhdGlvbl9pZBgBIAEoCRINCgV0aXRsZRgCIAEoCSJJChpVcGRhdGVDb252ZXJzYXRpb25SZXNwb25zZRIrCgxjb252ZXJzYXRpb24YASABKAsyFS5jaGF0LnYxLkNvbnZlcnNhdGlvbiI0ChlEZWxldGVDb252ZXJzYXRpb25SZXF1ZXN0EhcKD2NvbnZlcnNhdGlvbl9pZBgBIAEoCSIcChpEZWxldGVDb252ZXJzYXRpb25SZXNwb25zZSJfChRTdHJlYW1Jbml0aWFsaXphdGlvbhIXCg9jb252ZXJzYXRpb25faWQYASABKAkSLgoObGFuZ3VhZ2VfbW9kZWwYBSABKA4yFi5jaGF0LnYxLkxhbmd1YWdlTW9kZWwiTwoPU3RyZWFtUGFydEJlZ2luEhIKCm1lc3NhZ2VfaWQYASABKAkSKAoHcGF5bG9hZBgDIAEoCzIXLmNoYXQudjEuTWVzc2FnZVBheWxvYWQiMQoMTWVzc2FnZUNodW5rEhIKCm1lc3NhZ2VfaWQYASABKAkSDQoFZGVsdGEYAiABKAkiOgoTSW5jb21wbGV0ZUluZGljYXRvchIOCgZyZWFzb24YASABKAkSEwoLcmVzcG9uc2VfaWQYAiABKAkiTQoNU3RyZWFtUGFydEVuZBISCgptZXNzYWdlX2lkGAEgASgJEigKB3BheWxvYWQYAyABKAsyFy5jaGF0LnYxLk1lc3NhZ2VQYXlsb2FkIi0KElN0cmVhbUZpbmFsaXphdGlvbhIXCg9jb252ZXJzYXRpb25faWQYASABKAkiJAoLU3RyZWFtRXJyb3ISFQoNZXJyb3JfbWVzc2FnZRgBIAEoCSK9AgomQ3JlYXRlQ29udmVyc2F0aW9uTWVzc2FnZVN0cmVhbVJlcXVlc3QSEgoKcHJvamVjdF9pZBgBIAEoCRIcCg9jb252ZXJzYXRpb25faWQYAiABKAlIAIgBARIuCg5sYW5ndWFnZV9tb2RlbBgDIAEoDjIWLmNoYXQudjEuTGFuZ3VhZ2VNb2RlbBIUCgx1c2VyX21lc3NhZ2UYBCABKAkSHwoSdXNlcl9zZWxlY3RlZF90ZXh0GAUgASgJSAGIAQESOQoRY29udmVyc2F0aW9uX3R5cGUYBiABKA4yGS5jaGF0LnYxLkNvbnZlcnNhdGlvblR5cGVIAogBAUISChBfY29udmVyc2F0aW9uX2lkQhUKE191c2VyX3NlbGVjdGVkX3RleHRCFAoSX2NvbnZlcnNhdGlvbl90eXBlIr8DCidDcmVhdGVDb252ZXJzYXRpb25NZXNzYWdlU3RyZWFtUmVzcG9uc2USPgoVc3RyZWFtX2luaXRpYWxpemF0aW9uGAEgASgLMh0uY2hhdC52MS5TdHJlYW1Jbml0aWFsaXphdGlvbkgAEjUKEXN0cmVhbV9wYXJ0X2JlZ2luGAIgASgLMhguY2hhdC52MS5TdHJlYW1QYXJ0QmVnaW5IABIuCg1tZXNzYWdlX2NodW5rGAMgASgLMhUuY2hhdC52MS5NZXNzYWdlQ2h1bmtIABI8ChRpbmNvbXBsZXRlX2luZGljYXRvchgEIAEoCzIcLmNoYXQudjEuSW5jb21wbGV0ZUluZGljYXRvckgAEjEKD3N0cmVhbV9wYXJ0X2VuZBgFIAEoCzIWLmNoYXQudjEuU3RyZWFtUGFydEVuZEgAEjoKE3N0cmVhbV9maW5hbGl6YXRpb24YBiABKAsyGy5jaGF0LnYxLlN0cmVhbUZpbmFsaXphdGlvbkgAEiwKDHN0cmVhbV9lcnJvchgHIAEoCzIULmNoYXQudjEuU3RyZWFtRXJyb3JIAEISChByZXNwb25zZV9wYXlsb2FkKoECCg1MYW5ndWFnZU1vZGVsEh4KGkxBTkdVQUdFX01PREVMX1VOU1BFQ0lGSUVEEAASHwobTEFOR1VBR0VfTU9ERUxfT1BFTkFJX0dQVDRPEAESJAogTEFOR1VBR0VfTU9ERUxfT1BFTkFJX0dQVDQxX01JTkkQAhIfChtMQU5HVUFHRV9NT0RFTF9PUEVOQUlfR1BUNDEQBBIeChpMQU5HVUFHRV9NT0RFTF9PUEVOQUlfR1BUNRAHEiMKH0xBTkdVQUdFX01PREVMX09QRU5BSV9HUFQ1X01JTkkQCBIjCh9MQU5HVUFHRV9NT0RFTF9PUEVOQUlfR1BUNV9OQU5PEAkqUgoQQ29udmVyc2F0aW9uVHlwZRIhCh1DT05WRVJTQVRJT05fVFlQRV9VTlNQRUNJRklFRBAAEhsKF0NPTlZFUlNBVElPTl9UWVBFX0RFQlVHEAEyzQcKC0NoYXRTZXJ2aWNlEoMBChFMaXN0Q29udmVyc2F0aW9ucxIhLmNoYXQudjEuTGlzdENvbnZlcnNhdGlvbnNSZXF1ZXN0GiIuY2hhdC52MS5MaXN0Q29udmVyc2F0aW9uc1Jlc3BvbnNlIieC0+STAiESHy9fcGQvYXBpL3YxL2NoYXRzL2NvbnZlcnNhdGlvbnMSjwEKD0dldENvbnZlcnNhdGlvbhIfLmNoYXQudjEuR2V0Q29udmVyc2F0aW9uUmVxdWVzdBogLmNoYXQudjEuR2V0Q29udmVyc2F0aW9uUmVzcG9uc2UiOYLT5JMCMxIxL19wZC9hcGkvdjEvY2hhdHMvY29udmVyc2F0aW9ucy97Y29udmVyc2F0aW9uX2lkfRKnAQoZQ3JlYXRlQ29udmVyc2F0aW9uTWVzc2FnZRIpLmNoYXQudjEuQ3JlYXRlQ29udmVyc2F0aW9uTWVzc2FnZVJlcXVlc3QaKi5jaGF0LnYxLkNyZWF0ZUNvbnZlcnNhdGlvbk1lc3NhZ2VSZXNwb25zZSIzgtPkkwItOgEqIigvX3BkL2FwaS92MS9jaGF0cy9jb252ZXJzYXRpb25zL21lc3NhZ2VzEsIBCh9DcmVhdGVDb252ZXJzYXRpb25NZXNzYWdlU3RyZWFtEi8uY2hhdC52MS5DcmVhdGVDb252ZXJzYXRpb25NZXNzYWdlU3RyZWFtUmVxdWVzdBowLmNoYXQudjEuQ3JlYXRlQ29udmVyc2F0aW9uTWVzc2FnZVN0cmVhbVJlc3BvbnNlIjqC0+STAjQ6ASoiLy9fcGQvYXBpL3YxL2NoYXRzL2NvbnZlcnNhdGlvbnMvbWVzc2FnZXMvc3RyZWFtMAESmwEKElVwZGF0ZUNvbnZlcnNhdGlvbhIiLmNoYXQudjEuVXBkYXRlQ29udmVyc2F0aW9uUmVxdWVzdBojLmNoYXQudjEuVXBkYXRlQ29udmVyc2F0aW9uUmVzcG9uc2UiPILT5JMCNjoBKjIxL19wZC9hcGkvdjEvY2hhdHMvY29udmVyc2F0aW9ucy97Y29udmVyc2F0aW9uX2lkfRKYAQoSRGVsZXRlQ29udmVyc2F0aW9uEiIuY2hhdC52MS5EZWxldGVDb252ZXJzYXRpb25SZXF1ZXN0GiMuY2hhdC52MS5EZWxldGVDb252ZXJzYXRpb25SZXNwb25zZSI5gtPkkwIzKjEvX3BkL2FwaS92MS9jaGF0cy9jb252ZXJzYXRpb25zL3tjb252ZXJzYXRpb25faWR9Qn8KC2NvbS5jaGF0LnYxQglDaGF0UHJvdG9QAVoocGFwZXJkZWJ1Z2dlci9wa2cvZ2VuL2FwaS9jaGF0L3YxO2NoYXR2MaICA0NYWKoCB0NoYXQuVjHKAgdDaGF0XFYx4gITQ2hhdFxWMVxHUEJNZXRhZGF0YeoCCENoYXQ6OlYxYgZwcm90bzM", [file_google_api_annotations]);

/**
 * @generated from message chat.v1.MessageTypeToolCall
 */
export type MessageTypeToolCall = Message$1<"chat.v1.MessageTypeToolCall"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Json string
   *
   * @generated from field: string args = 2;
   */
  args: string;

  /**
   * Json string
   *
   * @generated from field: string result = 3;
   */
  result: string;

  /**
   * Json string
   *
   * @generated from field: string error = 4;
   */
  error: string;
};

/**
 * Describes the message chat.v1.MessageTypeToolCall.
 * Use `create(MessageTypeToolCallSchema)` to create a new message.
 */
export const MessageTypeToolCallSchema: GenMessage<MessageTypeToolCall> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 0);

/**
 * @generated from message chat.v1.MessageTypeToolCallPrepareArguments
 */
export type MessageTypeToolCallPrepareArguments = Message$1<"chat.v1.MessageTypeToolCallPrepareArguments"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Json string
   *
   * @generated from field: string args = 2;
   */
  args: string;
};

/**
 * Describes the message chat.v1.MessageTypeToolCallPrepareArguments.
 * Use `create(MessageTypeToolCallPrepareArgumentsSchema)` to create a new message.
 */
export const MessageTypeToolCallPrepareArgumentsSchema: GenMessage<MessageTypeToolCallPrepareArguments> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 1);

/**
 * @generated from message chat.v1.MessageTypeSystem
 */
export type MessageTypeSystem = Message$1<"chat.v1.MessageTypeSystem"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message chat.v1.MessageTypeSystem.
 * Use `create(MessageTypeSystemSchema)` to create a new message.
 */
export const MessageTypeSystemSchema: GenMessage<MessageTypeSystem> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 2);

/**
 * @generated from message chat.v1.MessageTypeAssistant
 */
export type MessageTypeAssistant = Message$1<"chat.v1.MessageTypeAssistant"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message chat.v1.MessageTypeAssistant.
 * Use `create(MessageTypeAssistantSchema)` to create a new message.
 */
export const MessageTypeAssistantSchema: GenMessage<MessageTypeAssistant> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 3);

/**
 * @generated from message chat.v1.MessageTypeUser
 */
export type MessageTypeUser = Message$1<"chat.v1.MessageTypeUser"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;

  /**
   * @generated from field: optional string selected_text = 2;
   */
  selectedText?: string;
};

/**
 * Describes the message chat.v1.MessageTypeUser.
 * Use `create(MessageTypeUserSchema)` to create a new message.
 */
export const MessageTypeUserSchema: GenMessage<MessageTypeUser> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 4);

/**
 * @generated from message chat.v1.MessageTypeUnknown
 */
export type MessageTypeUnknown = Message$1<"chat.v1.MessageTypeUnknown"> & {
  /**
   * @generated from field: string description = 1;
   */
  description: string;
};

/**
 * Describes the message chat.v1.MessageTypeUnknown.
 * Use `create(MessageTypeUnknownSchema)` to create a new message.
 */
export const MessageTypeUnknownSchema: GenMessage<MessageTypeUnknown> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 5);

/**
 * @generated from message chat.v1.MessagePayload
 */
export type MessagePayload = Message$1<"chat.v1.MessagePayload"> & {
  /**
   * @generated from oneof chat.v1.MessagePayload.message_type
   */
  messageType: {
    /**
     * @generated from field: chat.v1.MessageTypeSystem system = 1;
     */
    value: MessageTypeSystem;
    case: "system";
  } | {
    /**
     * @generated from field: chat.v1.MessageTypeUser user = 2;
     */
    value: MessageTypeUser;
    case: "user";
  } | {
    /**
     * @generated from field: chat.v1.MessageTypeAssistant assistant = 3;
     */
    value: MessageTypeAssistant;
    case: "assistant";
  } | {
    /**
     * @generated from field: chat.v1.MessageTypeToolCallPrepareArguments tool_call_prepare_arguments = 4;
     */
    value: MessageTypeToolCallPrepareArguments;
    case: "toolCallPrepareArguments";
  } | {
    /**
     * @generated from field: chat.v1.MessageTypeToolCall tool_call = 5;
     */
    value: MessageTypeToolCall;
    case: "toolCall";
  } | {
    /**
     * @generated from field: chat.v1.MessageTypeUnknown unknown = 6;
     */
    value: MessageTypeUnknown;
    case: "unknown";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message chat.v1.MessagePayload.
 * Use `create(MessagePayloadSchema)` to create a new message.
 */
export const MessagePayloadSchema: GenMessage<MessagePayload> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 6);

/**
 * @generated from message chat.v1.Message
 */
export type Message = Message$1<"chat.v1.Message"> & {
  /**
   * @generated from field: string message_id = 1;
   */
  messageId: string;

  /**
   * @generated from field: chat.v1.MessagePayload payload = 3;
   */
  payload?: MessagePayload;
};

/**
 * Describes the message chat.v1.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export const MessageSchema: GenMessage<Message> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 7);

/**
 * @generated from message chat.v1.Conversation
 */
export type Conversation = Message$1<"chat.v1.Conversation"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string title = 3;
   */
  title: string;

  /**
   * @generated from field: chat.v1.LanguageModel language_model = 2;
   */
  languageModel: LanguageModel;

  /**
   * If list conversations, then messages length is 0.
   *
   * @generated from field: repeated chat.v1.Message messages = 4;
   */
  messages: Message[];
};

/**
 * Describes the message chat.v1.Conversation.
 * Use `create(ConversationSchema)` to create a new message.
 */
export const ConversationSchema: GenMessage<Conversation> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 8);

/**
 * @generated from message chat.v1.ListConversationsRequest
 */
export type ListConversationsRequest = Message$1<"chat.v1.ListConversationsRequest"> & {
  /**
   * @generated from field: optional string project_id = 1;
   */
  projectId?: string;
};

/**
 * Describes the message chat.v1.ListConversationsRequest.
 * Use `create(ListConversationsRequestSchema)` to create a new message.
 */
export const ListConversationsRequestSchema: GenMessage<ListConversationsRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 9);

/**
 * @generated from message chat.v1.ListConversationsResponse
 */
export type ListConversationsResponse = Message$1<"chat.v1.ListConversationsResponse"> & {
  /**
   * In this response, the length of conversations[i].messages should be 0.
   *
   * @generated from field: repeated chat.v1.Conversation conversations = 1;
   */
  conversations: Conversation[];
};

/**
 * Describes the message chat.v1.ListConversationsResponse.
 * Use `create(ListConversationsResponseSchema)` to create a new message.
 */
export const ListConversationsResponseSchema: GenMessage<ListConversationsResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 10);

/**
 * @generated from message chat.v1.GetConversationRequest
 */
export type GetConversationRequest = Message$1<"chat.v1.GetConversationRequest"> & {
  /**
   * @generated from field: string conversation_id = 1;
   */
  conversationId: string;
};

/**
 * Describes the message chat.v1.GetConversationRequest.
 * Use `create(GetConversationRequestSchema)` to create a new message.
 */
export const GetConversationRequestSchema: GenMessage<GetConversationRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 11);

/**
 * @generated from message chat.v1.GetConversationResponse
 */
export type GetConversationResponse = Message$1<"chat.v1.GetConversationResponse"> & {
  /**
   * @generated from field: chat.v1.Conversation conversation = 1;
   */
  conversation?: Conversation;
};

/**
 * Describes the message chat.v1.GetConversationResponse.
 * Use `create(GetConversationResponseSchema)` to create a new message.
 */
export const GetConversationResponseSchema: GenMessage<GetConversationResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 12);

/**
 * @generated from message chat.v1.CreateConversationMessageRequest
 */
export type CreateConversationMessageRequest = Message$1<"chat.v1.CreateConversationMessageRequest"> & {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * If conversation_id is not provided,
   * a new conversation will be created and the id will be returned.
   *
   * @generated from field: optional string conversation_id = 2;
   */
  conversationId?: string;

  /**
   * @generated from field: chat.v1.LanguageModel language_model = 3;
   */
  languageModel: LanguageModel;

  /**
   * @generated from field: string user_message = 4;
   */
  userMessage: string;

  /**
   * @generated from field: optional string user_selected_text = 5;
   */
  userSelectedText?: string;

  /**
   * @generated from field: optional chat.v1.ConversationType conversation_type = 6;
   */
  conversationType?: ConversationType;
};

/**
 * Describes the message chat.v1.CreateConversationMessageRequest.
 * Use `create(CreateConversationMessageRequestSchema)` to create a new message.
 */
export const CreateConversationMessageRequestSchema: GenMessage<CreateConversationMessageRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 13);

/**
 * @generated from message chat.v1.CreateConversationMessageResponse
 */
export type CreateConversationMessageResponse = Message$1<"chat.v1.CreateConversationMessageResponse"> & {
  /**
   * @generated from field: chat.v1.Conversation conversation = 1;
   */
  conversation?: Conversation;
};

/**
 * Describes the message chat.v1.CreateConversationMessageResponse.
 * Use `create(CreateConversationMessageResponseSchema)` to create a new message.
 */
export const CreateConversationMessageResponseSchema: GenMessage<CreateConversationMessageResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 14);

/**
 * @generated from message chat.v1.UpdateConversationRequest
 */
export type UpdateConversationRequest = Message$1<"chat.v1.UpdateConversationRequest"> & {
  /**
   * @generated from field: string conversation_id = 1;
   */
  conversationId: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;
};

/**
 * Describes the message chat.v1.UpdateConversationRequest.
 * Use `create(UpdateConversationRequestSchema)` to create a new message.
 */
export const UpdateConversationRequestSchema: GenMessage<UpdateConversationRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 15);

/**
 * @generated from message chat.v1.UpdateConversationResponse
 */
export type UpdateConversationResponse = Message$1<"chat.v1.UpdateConversationResponse"> & {
  /**
   * @generated from field: chat.v1.Conversation conversation = 1;
   */
  conversation?: Conversation;
};

/**
 * Describes the message chat.v1.UpdateConversationResponse.
 * Use `create(UpdateConversationResponseSchema)` to create a new message.
 */
export const UpdateConversationResponseSchema: GenMessage<UpdateConversationResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 16);

/**
 * @generated from message chat.v1.DeleteConversationRequest
 */
export type DeleteConversationRequest = Message$1<"chat.v1.DeleteConversationRequest"> & {
  /**
   * @generated from field: string conversation_id = 1;
   */
  conversationId: string;
};

/**
 * Describes the message chat.v1.DeleteConversationRequest.
 * Use `create(DeleteConversationRequestSchema)` to create a new message.
 */
export const DeleteConversationRequestSchema: GenMessage<DeleteConversationRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 17);

/**
 * explicitly empty
 *
 * @generated from message chat.v1.DeleteConversationResponse
 */
export type DeleteConversationResponse = Message$1<"chat.v1.DeleteConversationResponse"> & {
};

/**
 * Describes the message chat.v1.DeleteConversationResponse.
 * Use `create(DeleteConversationResponseSchema)` to create a new message.
 */
export const DeleteConversationResponseSchema: GenMessage<DeleteConversationResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 18);

/**
 * Information sent once at the beginning of a new conversation stream
 *
 * @generated from message chat.v1.StreamInitialization
 */
export type StreamInitialization = Message$1<"chat.v1.StreamInitialization"> & {
  /**
   * @generated from field: string conversation_id = 1;
   */
  conversationId: string;

  /**
   * @generated from field: chat.v1.LanguageModel language_model = 5;
   */
  languageModel: LanguageModel;
};

/**
 * Describes the message chat.v1.StreamInitialization.
 * Use `create(StreamInitializationSchema)` to create a new message.
 */
export const StreamInitializationSchema: GenMessage<StreamInitialization> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 19);

/**
 * Designed as StreamPartBegin and StreamPartEnd to
 * handle the case where assistant and tool are called at the same time.
 *
 * User: Please answer me "Ok I will do that", then call "get_weather"
 * Assistant: Ok I will do that + Tool: get_weather
 *
 * @generated from message chat.v1.StreamPartBegin
 */
export type StreamPartBegin = Message$1<"chat.v1.StreamPartBegin"> & {
  /**
   * @generated from field: string message_id = 1;
   */
  messageId: string;

  /**
   * @generated from field: chat.v1.MessagePayload payload = 3;
   */
  payload?: MessagePayload;
};

/**
 * Describes the message chat.v1.StreamPartBegin.
 * Use `create(StreamPartBeginSchema)` to create a new message.
 */
export const StreamPartBeginSchema: GenMessage<StreamPartBegin> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 20);

/**
 * Note: After the StreamPartBegin of tool_call, there can be no MessageChunk,
 *       and the StreamPartEnd can be directly called when the result is ready.
 *
 * @generated from message chat.v1.MessageChunk
 */
export type MessageChunk = Message$1<"chat.v1.MessageChunk"> & {
  /**
   * The id of the message that this chunk belongs to
   *
   * @generated from field: string message_id = 1;
   */
  messageId: string;

  /**
   * The small piece of text
   *
   * @generated from field: string delta = 2;
   */
  delta: string;
};

/**
 * Describes the message chat.v1.MessageChunk.
 * Use `create(MessageChunkSchema)` to create a new message.
 */
export const MessageChunkSchema: GenMessage<MessageChunk> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 21);

/**
 * @generated from message chat.v1.IncompleteIndicator
 */
export type IncompleteIndicator = Message$1<"chat.v1.IncompleteIndicator"> & {
  /**
   * @generated from field: string reason = 1;
   */
  reason: string;

  /**
   * @generated from field: string response_id = 2;
   */
  responseId: string;
};

/**
 * Describes the message chat.v1.IncompleteIndicator.
 * Use `create(IncompleteIndicatorSchema)` to create a new message.
 */
export const IncompleteIndicatorSchema: GenMessage<IncompleteIndicator> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 22);

/**
 * @generated from message chat.v1.StreamPartEnd
 */
export type StreamPartEnd = Message$1<"chat.v1.StreamPartEnd"> & {
  /**
   * @generated from field: string message_id = 1;
   */
  messageId: string;

  /**
   * @generated from field: chat.v1.MessagePayload payload = 3;
   */
  payload?: MessagePayload;
};

/**
 * Describes the message chat.v1.StreamPartEnd.
 * Use `create(StreamPartEndSchema)` to create a new message.
 */
export const StreamPartEndSchema: GenMessage<StreamPartEnd> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 23);

/**
 * Sent when the current AI response is fully streamed
 *
 * @generated from message chat.v1.StreamFinalization
 */
export type StreamFinalization = Message$1<"chat.v1.StreamFinalization"> & {
  /**
   * Do not return the full Conversation here.
   * If the user wants, they can call the GetConversation API themselves.
   * Note: Do not call GetConversation when receiving streamFinalization,
   *       it should be called after the entire API call is finished.
   *
   * @generated from field: string conversation_id = 1;
   */
  conversationId: string;
};

/**
 * Describes the message chat.v1.StreamFinalization.
 * Use `create(StreamFinalizationSchema)` to create a new message.
 */
export const StreamFinalizationSchema: GenMessage<StreamFinalization> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 24);

/**
 * @generated from message chat.v1.StreamError
 */
export type StreamError = Message$1<"chat.v1.StreamError"> & {
  /**
   * @generated from field: string error_message = 1;
   */
  errorMessage: string;
};

/**
 * Describes the message chat.v1.StreamError.
 * Use `create(StreamErrorSchema)` to create a new message.
 */
export const StreamErrorSchema: GenMessage<StreamError> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 25);

/**
 * This message should be the same as CreateConversationMessageRequest
 * Note: If conversation_id is provided,
 *       the conversation will be created and returned.
 *
 * @generated from message chat.v1.CreateConversationMessageStreamRequest
 */
export type CreateConversationMessageStreamRequest = Message$1<"chat.v1.CreateConversationMessageStreamRequest"> & {
  /**
   * @generated from field: string project_id = 1;
   */
  projectId: string;

  /**
   * @generated from field: optional string conversation_id = 2;
   */
  conversationId?: string;

  /**
   * @generated from field: chat.v1.LanguageModel language_model = 3;
   */
  languageModel: LanguageModel;

  /**
   * @generated from field: string user_message = 4;
   */
  userMessage: string;

  /**
   * @generated from field: optional string user_selected_text = 5;
   */
  userSelectedText?: string;

  /**
   * @generated from field: optional chat.v1.ConversationType conversation_type = 6;
   */
  conversationType?: ConversationType;
};

/**
 * Describes the message chat.v1.CreateConversationMessageStreamRequest.
 * Use `create(CreateConversationMessageStreamRequestSchema)` to create a new message.
 */
export const CreateConversationMessageStreamRequestSchema: GenMessage<CreateConversationMessageStreamRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 26);

/**
 * Response for streaming a message within an existing conversation
 *
 * @generated from message chat.v1.CreateConversationMessageStreamResponse
 */
export type CreateConversationMessageStreamResponse = Message$1<"chat.v1.CreateConversationMessageStreamResponse"> & {
  /**
   * @generated from oneof chat.v1.CreateConversationMessageStreamResponse.response_payload
   */
  responsePayload: {
    /**
     * @generated from field: chat.v1.StreamInitialization stream_initialization = 1;
     */
    value: StreamInitialization;
    case: "streamInitialization";
  } | {
    /**
     * @generated from field: chat.v1.StreamPartBegin stream_part_begin = 2;
     */
    value: StreamPartBegin;
    case: "streamPartBegin";
  } | {
    /**
     * @generated from field: chat.v1.MessageChunk message_chunk = 3;
     */
    value: MessageChunk;
    case: "messageChunk";
  } | {
    /**
     * @generated from field: chat.v1.IncompleteIndicator incomplete_indicator = 4;
     */
    value: IncompleteIndicator;
    case: "incompleteIndicator";
  } | {
    /**
     * @generated from field: chat.v1.StreamPartEnd stream_part_end = 5;
     */
    value: StreamPartEnd;
    case: "streamPartEnd";
  } | {
    /**
     * @generated from field: chat.v1.StreamFinalization stream_finalization = 6;
     */
    value: StreamFinalization;
    case: "streamFinalization";
  } | {
    /**
     * @generated from field: chat.v1.StreamError stream_error = 7;
     */
    value: StreamError;
    case: "streamError";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message chat.v1.CreateConversationMessageStreamResponse.
 * Use `create(CreateConversationMessageStreamResponseSchema)` to create a new message.
 */
export const CreateConversationMessageStreamResponseSchema: GenMessage<CreateConversationMessageStreamResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 27);

/**
 * @generated from enum chat.v1.LanguageModel
 */
export enum LanguageModel {
  /**
   * @generated from enum value: LANGUAGE_MODEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LANGUAGE_MODEL_OPENAI_GPT4O = 1;
   */
  OPENAI_GPT4O = 1,

  /**
   * @generated from enum value: LANGUAGE_MODEL_OPENAI_GPT41_MINI = 2;
   */
  OPENAI_GPT41_MINI = 2,

  /**
   * @generated from enum value: LANGUAGE_MODEL_OPENAI_GPT41 = 4;
   */
  OPENAI_GPT41 = 4,

  /**
   * @generated from enum value: LANGUAGE_MODEL_OPENAI_GPT5 = 7;
   */
  OPENAI_GPT5 = 7,

  /**
   * @generated from enum value: LANGUAGE_MODEL_OPENAI_GPT5_MINI = 8;
   */
  OPENAI_GPT5_MINI = 8,

  /**
   * @generated from enum value: LANGUAGE_MODEL_OPENAI_GPT5_NANO = 9;
   */
  OPENAI_GPT5_NANO = 9,
}

/**
 * Describes the enum chat.v1.LanguageModel.
 */
export const LanguageModelSchema: GenEnum<LanguageModel> = /*@__PURE__*/
  enumDesc(file_chat_v1_chat, 0);

/**
 * @generated from enum chat.v1.ConversationType
 */
export enum ConversationType {
  /**
   * @generated from enum value: CONVERSATION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * does not contain any customized messages, the inapp_history and openai_history are synced.
   *
   * @generated from enum value: CONVERSATION_TYPE_DEBUG = 1;
   */
  DEBUG = 1,
}

/**
 * Describes the enum chat.v1.ConversationType.
 */
export const ConversationTypeSchema: GenEnum<ConversationType> = /*@__PURE__*/
  enumDesc(file_chat_v1_chat, 1);

/**
 * @generated from service chat.v1.ChatService
 */
export const ChatService: GenService<{
  /**
   * @generated from rpc chat.v1.ChatService.ListConversations
   */
  listConversations: {
    methodKind: "unary";
    input: typeof ListConversationsRequestSchema;
    output: typeof ListConversationsResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.GetConversation
   */
  getConversation: {
    methodKind: "unary";
    input: typeof GetConversationRequestSchema;
    output: typeof GetConversationResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.CreateConversationMessage
   */
  createConversationMessage: {
    methodKind: "unary";
    input: typeof CreateConversationMessageRequestSchema;
    output: typeof CreateConversationMessageResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.CreateConversationMessageStream
   */
  createConversationMessageStream: {
    methodKind: "server_streaming";
    input: typeof CreateConversationMessageStreamRequestSchema;
    output: typeof CreateConversationMessageStreamResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.UpdateConversation
   */
  updateConversation: {
    methodKind: "unary";
    input: typeof UpdateConversationRequestSchema;
    output: typeof UpdateConversationResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.DeleteConversation
   */
  deleteConversation: {
    methodKind: "unary";
    input: typeof DeleteConversationRequestSchema;
    output: typeof DeleteConversationResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_chat_v1_chat, 0);

