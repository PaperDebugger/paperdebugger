// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/google/wire"
	"paperdebugger/internal/api"
	"paperdebugger/internal/api/auth"
	"paperdebugger/internal/api/chat"
	"paperdebugger/internal/api/comment"
	"paperdebugger/internal/api/project"
	"paperdebugger/internal/api/user"
	"paperdebugger/internal/libs/cfg"
	"paperdebugger/internal/libs/db"
	"paperdebugger/internal/libs/logger"
	"paperdebugger/internal/services"
	"paperdebugger/internal/services/toolkit/client"
)

// Injectors from wire.go:

func InitializeApp() (*api.Server, error) {
	cfgCfg := cfg.GetCfg()
	loggerLogger := logger.GetLogger()
	dbDB, err := db.NewDB(cfgCfg, loggerLogger)
	if err != nil {
		return nil, err
	}
	userService := services.NewUserService(dbDB, cfgCfg, loggerLogger)
	tokenService := services.NewTokenService(dbDB, cfgCfg, loggerLogger)
	authServiceServer := auth.NewAuthServer(tokenService, userService, cfgCfg, loggerLogger)
	projectService := services.NewProjectService(dbDB, cfgCfg, loggerLogger)
	reverseCommentService := services.NewReverseCommentService(dbDB, cfgCfg, loggerLogger, projectService)
	aiClient := client.NewAIClient(dbDB, reverseCommentService, projectService, cfgCfg, loggerLogger)
	chatService := services.NewChatService(dbDB, cfgCfg, loggerLogger)
	chatServiceServer := chat.NewChatServer(aiClient, chatService, projectService, userService, loggerLogger, cfgCfg)
	promptService := services.NewPromptService(dbDB, cfgCfg, loggerLogger)
	userServiceServer := user.NewUserServer(userService, promptService, cfgCfg, loggerLogger)
	projectServiceServer := project.NewProjectServer(projectService, loggerLogger, cfgCfg)
	commentServiceServer := comment.NewCommentServer(projectService, chatService, reverseCommentService, loggerLogger, cfgCfg)
	grpcServer := api.NewGrpcServer(userService, cfgCfg, authServiceServer, chatServiceServer, userServiceServer, projectServiceServer, commentServiceServer)
	oAuthService := services.NewOAuthService(dbDB, cfgCfg, loggerLogger)
	oAuthHandler := auth.NewOAuthHandler(oAuthService)
	ginServer := api.NewGinServer(cfgCfg, oAuthHandler)
	server := api.NewServer(grpcServer, ginServer, loggerLogger)
	return server, nil
}

// wire.go:

var Set = wire.NewSet(api.NewServer, api.NewGrpcServer, api.NewGinServer, auth.NewOAuthHandler, auth.NewAuthServer, chat.NewChatServer, user.NewUserServer, project.NewProjectServer, comment.NewCommentServer, client.NewAIClient, services.NewReverseCommentService, services.NewChatService, services.NewTokenService, services.NewUserService, services.NewProjectService, services.NewPromptService, services.NewOAuthService, cfg.GetCfg, logger.GetLogger, db.NewDB)
